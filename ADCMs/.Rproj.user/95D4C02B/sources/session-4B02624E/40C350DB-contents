# remove.packages("ADCM")
# install.packages("./code/LoadPackages/ADCM_1.0.zip", 
#                  repos = NULL, type = "win.binary")
rm(list = ls())
source("./LoadPackages/RDependPackages.R")
data("SiteData", package = "ADCM")
data("China_BTH_GeoMap", package = "ADCM")
hdcm.table <- "ADCMx"
Ch <- .3
Cs <- .1
Obj.Seq <- 1:1

##############################################################################################
Ct <- 1; Ne <- 100
##############################################################################################

DATE_TIME <- unique(obs_PM25_2015w$DATE_TIME) %>% sort()
Nt <- length(DATE_TIME)
date.time <- data.frame(time.index = 1:Nt,
                        time.scale = seq(0, 1, , Nt),
                        DATE_TIME = DATE_TIME)
Model_Base_Table <- obs_PM25_2015w  %>% left_join(date.time, 
                                                  by = c("DATE_TIME"))

colnames(Model_Base_Table)

da.0 <- Validation.Group.Region(data = Model_Base_Table , 
                                col = c("REAL_PM25", 
                                        "sim_CMAQ_PM25"),
                                by = "CITY")
da.0
# writexl::write_xlsx(da.0, path = "./Result/CMAQ.xlsx")


# do transformation for some variables 
Model_Base_Table[, c("sim50_CMAQ_PM25")] <- sqrt(Model_Base_Table[, c("sim50_CMAQ_PM25")])
setDT(Model_Base_Table)
##############################################################################################
# Do grid and create basis H
##############################################################################################
colnames(Map_BTH)[1:2] <- c("LON", "LAT")
Boundary <- as.data.frame(t(bbox(China.province.map)))
names(Boundary) <- c("LON", "LAT")
model.Grid <- makeGrids(Boundary, nLayer = 2, NC = 15, nBuffer = 3.5) 


H.basic.data <- CreateHmatrix(grid_coords = model.Grid, 
                              Geo_Map_Coord = China.province.map,
                              method = c("Wendland"), #Wendland, indicator, INLA
                              Site = Site, 
                              factor = 1, 
                              Ch = Ch, 
                              distance.scale = 1e3,
                              Knots.clip.ratio = .10,
                              hs.normal = FALSE) 
print(H.basic.data$Grid.infor$summary$Knots.clip.distance)
######################################################################
#                Constructing Data forms used in the ADCM 
######################################################################
ADCM_Data <- Construct_ADCM_Data(data = Model_Base_Table,
                                 include = list(
                                   YEAR = c(2015, 2016),
                                   month_day = c("11-01", "1-31")
                                 ),
                                 Y = "REAL_PM25",
                                 X = c("sim50_CMAQ_PM25"
                                 ), 
                                 standard = T, 
                                 center = T, 
                                 start.index = 1)

# Vari <- var(sqrt(as.vector(ADCM_Data$Y_ts)))
# cor(as.vector(sqrt(ADCM_Data$Y_ts)), 
#     as.vector(ADCM_Data$X_ts[2,,]))
# mean(as.vector(sqrt(ADCM_Data$Y_ts)))
# 
# mean(as.vector(sqrt(ADCM_Data$Y_ts)) - .5*
#     as.vector(ADCM_Data$X_ts[2,,]))

######################################################################
#                         Model set
######################################################################

######################################################################

{
  ######################################################################
  #                        initialize  parameters
  ######################################################################
  # dis <- max(H.basic.data$Grid.infor$level[[1]]$BAUs.Dist)*0.1
  nx <- dim(ADCM_Data$X_ts)[1]
  zeta <- sqrt(50/(2*sqrt(2)))
  zeta
  para <- list(beta = list(E_beta = c(7, 2.5, rep(0, nx - 2))), 
               rho = list(E_rho = 1e-1) 
               ##  Q = tau.sq*(G + zeta*G)
               , zeta = list(E_zeta = zeta, lower = 1E-3, upper = 1e1)
               , zeta0 = list(E_zeta0 = zeta, lower = 1E-3, upper = 1e1)
               , phi = list(E_phi = 5e1, lower = 1e1, upper = 5e2) 
               , Obs.sigma.sq = list(E_sigma.sq = 1) 
               , Proc0.tau.sq = list(E_tau.sq = 1)
               , Proc.tau.sq = list(E_tau.sq = 1)
  )# 0.001,0.1; cs:0.15 ct = 5
}
######################################################################
#                 the formula for additive mdoels
######################################################################
formula.exp <- paste0("REAL_PM25 ~ sim50_CMAQ_PM25")

######################################################################
#                           fit model and prediction
######################################################################
tab.1 <- strsplit(as.character(Ch), ".", fixed = TRUE)[[1]][2]
tab.2 <- strsplit(as.character(Cs), ".", fixed = TRUE)[[1]][2]
# tab <- paste0(tab.1, "_", tab.2, "_", Ct)
tab <- paste0("_", tab.1, "_", tab.2)
# library(profvis)
# profvis({
star.time <- proc.time()
cv.ADCM <- ADCM(Mean.formula = formula.exp,
                Tab = paste0(hdcm.table, tab),
                # Site = Site, 
                ADCM.Data = ADCM_Data, 
                H.basic.data = H.basic.data,
                para = para, 
                Ensemble.size = Ne,
                ensemble.group = 1,
                CV = TRUE, 
                Database = NULL, #list(
                # DSN = odbcConnect(dsn = "DSN_01", 
                #                   uid = "myname",
                #                   pwd = "mypwd",
                #                   believeNRows = FALSE,
                #                   case = "toupper")),
                verbose.EM = TRUE,
                verbose = TRUE, 
                Object = "CITY",
                response.transf = c("sr"),
                itMin = 1e1,
                cs = Cs, 
                ct = Ct,
                tol.real = 1e-2, 
                itMax = 5e1, 
                Obj.Seq = Obj.Seq)
end.time <- proc.time()
run_time <- (end.time - star.time)[3] 
# })
######################################################################
#                    summary for results
######################################################################
ADCM <- Run_Time <- NULL
for (r in Obj.Seq) {
  da <- as.data.frame(cv.ADCM[[r]]$Pred)
  da$DATE_TIME <- as.Date(rownames(cv.ADCM[[r]]$Pred.Yts))
  ADCM <- rbind(ADCM, gather(
    data = da,      
    key = "ID",       
    value = "PM25.Pred" ,    
    -DATE_TIME
  ))
  Run_Time <- rbind(Run_Time, data.frame(CITY = cv.ADCM[[r]]$Object,
                                         run_time = cv.ADCM[[r]]$run_time))
  
}
dim(ADCM)
ADCM$ID <- as.numeric(ADCM$ID)
ADCM <- ADCM %>% left_join(obs_PM25_2015w[, c(2, 1, 4:5, 8:15)],
                           by = c("ID", "DATE_TIME")) %>%
  left_join(Run_Time, by = "CITY")
dim(ADCM)
writexl::write_xlsx(ADCM, path = paste0("./Result/pred_", hdcm.table, tab, "_cv.xlsx"))
# paste0(hdcm.table, tab)




